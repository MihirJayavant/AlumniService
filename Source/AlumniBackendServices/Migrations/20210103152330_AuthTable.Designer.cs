// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AlumniBackendServices.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210103152330_AuthTable")]
    partial class AuthTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Core.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AnnualSalary")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<short>("YearOfJoining")
                        .HasColumnType("SMALLINT");

                    b.HasKey("CompanyId");

                    b.HasIndex("StudentId");

                    b.HasIndex("CompanyName", "Designation");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Core.Entities.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Score")
                        .HasColumnType("SMALLINT");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<short>("Year")
                        .HasColumnType("SMALLINT");

                    b.HasKey("ExamId");

                    b.HasIndex("ExamName");

                    b.HasIndex("StudentId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("MobileNo")
                        .HasColumnType("bigint");

                    b.HasKey("FacultyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .IncludeProperties(new[] { "FirstName", "LastName" });

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Core.Entities.FurtherStudy", b =>
                {
                    b.Property<int>("FurtherStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<short>("AdmissionYear")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<short>("PassingYear")
                        .HasColumnType("SMALLINT");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("FurtherStudyId");

                    b.HasIndex("StudentId");

                    b.HasIndex("InstituteName", "Country");

                    b.ToTable("FurtherStudies");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<short>("AdmissionYear")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<long>("MobileNo")
                        .HasColumnType("bigint");

                    b.Property<short>("PassingYear")
                        .HasColumnType("SMALLINT");

                    b.Property<Guid>("StudentAccount")
                        .HasColumnType("uuid");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentId", "Email")
                        .IsUnique()
                        .IncludeProperties(new[] { "FirstName", "LastName", "Branch" });

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.StudentAccount", b =>
                {
                    b.Property<Guid>("StudentAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("StudentAccountId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentAccount");
                });

            modelBuilder.Entity("Core.Entities.Company", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("Companies")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Exam", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("Exams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.FurtherStudy", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("FurtherStudies")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Address", "CorrespondanceAddress", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<int>("Pincode")
                                .HasColumnType("integer");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("UserAddress")
                                .IsRequired()
                                .HasColumnType("varchar(100)");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("Core.ValueObjects.Address", "CurrentAddress", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<int>("Pincode")
                                .HasColumnType("integer");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("UserAddress")
                                .IsRequired()
                                .HasColumnType("varchar(100)");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("CorrespondanceAddress");

                    b.Navigation("CurrentAddress");
                });

            modelBuilder.Entity("Core.Entities.StudentAccount", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithOne("Account")
                        .HasForeignKey("Core.Entities.StudentAccount", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Companies");

                    b.Navigation("Exams");

                    b.Navigation("FurtherStudies");
                });
#pragma warning restore 612, 618
        }
    }
}
